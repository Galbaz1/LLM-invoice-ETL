This application provides a beautiful, animated web interface for extracting information from receipts and invoices using OpenAI's GPT-4o model and the Instructor Library for structured extraction and data validation with Pydantic V2.

The app is finished up till this point. Do not try to create it as it is already here.

Considerations:

An important concept of the app is Pydantic Field Validation.

##example

One of the benefits of having Pydantic is the ease with which we can define validators. We cover this topic in many articles, like Reasking Validation and in our blog post Good LLM validation is just good validation.

This post will mostly describe how to use simple and more complex retry and logic.

Example of a Validator¶
Before we begin, we'll use a simple example of a validator. One that checks that the name is in all caps. While we could obviously prompt that we want the name in all caps, this serves as an example of how we can build in additional logic without changing our prompts.

from typing import Annotated
from pydantic import AfterValidator, BaseModel


def uppercase_validator(v):
    if v.islower():
        raise ValueError("Name must be ALL CAPS")
    return v


class UserDetail(BaseModel):
    name: Annotated[str, AfterValidator(uppercase_validator)]
    age: int


try:
    UserDetail(name="jason", age=12)
except Exception as e:
    print(e)
    """
    1 validation error for UserDetail
    name
      Value error, Name must be ALL CAPS [type=value_error, input_value='jason', input_type=str]
        For further information visit https://errors.pydantic.dev/2.9/v/value_error
    """

Simple: Max Retries¶
The simplest way to set up retries is to assign an integer value to max_retries.

import openai
import instructor
from pydantic import BaseModel


class UserDetail(BaseModel):
    name: str
    age: int


client = instructor.from_openai(openai.OpenAI(), mode=instructor.Mode.TOOLS)

response = client.chat.completions.create(
    model="gpt-4o",
    response_model=UserDetail,
    messages=[
        {"role": "user", "content": "Extract `jason is 12`"},
    ],
    max_retries=3,  
)
print(response.model_dump_json(indent=2))
"""
{
  "name": "jason",
  "age": 12
}
"""

Further improvements.

STEP-1:

Instead of only txt files, add pdf support. We will need to use an API to extract the text from the pdf named "LLMWhisperer".

API Endpoints
Endpoint	Description
/whisper	Convert your PDF documents, scanned documents, scanned images, Office documents and spreadsheets to text format which can be used by LLMs or other downstream applications.
/whisper-status	Get the status of the conversion process. This can be used to check the status of the conversion process when the conversion is done.
/whisper-retrieve	Retrieve the converted text of the document.
/get-usage-info	Get usage metrics for your account.
/whisper-manage-callback	Register webhooks (callbacks) which can be called after a conversion finishes
Base URL
The base URL for the APIs is https://llmwhisperer-api.us-central.unstract.com/api/v2


